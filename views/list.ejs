<!DOCTYPE html>
<html>
<head>
    <title>PM2 Manager</title>
    <link rel="stylesheet" type="text/css" href="/styles.css">
    <script>
        function manageProcess(name, action) {
            fetch(`/manage/${name}/${action}`)
            .then(() => location.reload())
            .catch((error) => alert('An error occurred: ' + error));
        }
    </script>
</head>
<body>
    <table>
        <thead>
        <tr>
	        <th>Process #</th>
	        <th>Name</th>
	        <th>CPU</th>
	        <th>Memory</th>
	        <th>Restarts</th>
	        <th>State</th>
	        <th>Actions</th>
	    </tr>
	    </thead>
        <tbody>
	    <% processList.forEach(function(process, index) { %>
	        <tr class="<%= index % 2 === 0 ? 'light-blue' : 'white' %>" id="<%= process.name %>">
		    <td><%= index + 1 %></td>
		    <td><%= process.name %></td>
		    <td><%= process.monit.cpu %> %</td>
		    <td><%= (process.monit.memory / 1024 / 1024).toFixed(2) %> MB</td>
		    <td><%= process.pm2_env.restart_time %></td>
		    <td>
    <span id="<%= process.name %>-state" class="state-<%= process.pm2_env.status === 'online' ? 'online' : process.pm2_env.status === 'stopped' ? 'stopped' : 'other' %>">
        <%= process.pm2_env.status %>
    </span>
</td>
	

		    <td>
		        <button class="start" onclick="manageProcess('<%= process.name %>', 'start')">&#9658;</button>
		        <button class="stop" onclick="manageProcess('<%= process.name %>', 'stop')">&#9724;</button>
		        <button class="restart" onclick="manageProcess('<%= process.name %>', 'restart')">&#x21bb;</button>
		    </td>
	        </tr>
	    <% }); %>


	<script>
	    setInterval(() => {
		fetch('/states')
		    .then(response => response.json())
		    .then(states => {
			states.forEach(proc => {
			    let stateElement = document.getElementById(proc.name + '-state');
			    let cpuElement = document.getElementById(proc.name + '-cpu');
			    let memoryElement = document.getElementById(proc.name + '-memory');
			    let restartElement = document.getElementById(proc.name + '-restart');

		if (stateElement && stateElement.textContent !== proc.status) {
		    stateElement.textContent = proc.status;
		    stateElement.className = `state-${proc.status === 'online' ? 'online' : proc.status === 'stopped' ? 'stopped' : 'other'}`;
		}


			    if (cpuElement && cpuElement.textContent !== proc.cpu + ' %') {
				cpuElement.textContent = proc.cpu + ' %';
			    }
			    if (memoryElement && memoryElement.textContent !== proc.memory + ' MB') {
				memoryElement.textContent = proc.memory + ' MB';
			    }
			    if (restartElement && restartElement.textContent !== String(proc.restart_time)) {
				restartElement.textContent = proc.restart_time;
			    }
			});
		    })
		    .catch((error) => alert('An error occurred: ' + error));
	    }, 5000); // Fetches the state every 5 seconds
	</script>



	</tbody>
    </table>
</body>
</html>
